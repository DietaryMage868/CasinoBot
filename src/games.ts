// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞
import { Markup } from 'telegraf';

const slotEmojis = ['7Ô∏è‚É£', 'üçá', 'üçã', 'üêè'];
const emojiMap: { [key: number]: string } = {
  1: '7Ô∏è‚É£',
  2: 'üçá',
  3: 'üçã',
  4: 'üêè',
};

// export async function slotGame(ctx: any, db: any) {
//   const userId = ctx.from?.id;
//   const text = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
//   const guess = text.replace('/slot', '').trim();
//   if (!Object.values(emojiMap).includes(guess)) {
//     ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–æ—Ç–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /slot 7Ô∏è‚É£ –∏–ª–∏ /slot üçá');
//     return;
//   }
//   // –ö–∏–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç üé∞
//   const diceMsg = await ctx.replyWithDice('slot');
//   setTimeout(() => {
//     const resultValue = diceMsg.dice.value;
//     const resultEmoji = emojiMap[resultValue] || 'üé∞';
//     if (guess === resultEmoji) {
//       db.run('UPDATE users SET balance = balance * 5 WHERE id = ?', [userId]);
//       ctx.reply(`–í—ã–ø–∞–ª–æ: ${resultEmoji}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ x5 –æ—Ç –±–∞–ª–∞–Ω—Å–∞!`);
//     } else {
//       ctx.reply(`–í—ã–ø–∞–ª–æ: ${resultEmoji}\n–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.`);
//     }
//   }, 3000);
// }

export async function evenOddGame(ctx: any, db: any) {
  ctx.session = ctx.session || {};
  ctx.session.awaitingBet = 'evenOdd';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–≤ TON) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç:');
}

export async function handleEvenOddBet(ctx: any, db: any, bet: number) {
  ctx.session = ctx.session || {};
  ctx.session.bet = bet;
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ:', Markup.inlineKeyboard([
    [Markup.button.callback('–ß—ë—Ç–Ω–æ–µ', 'even'), Markup.button.callback('–ù–µ—á—ë—Ç–Ω–æ–µ', 'odd')]
  ]));
}

export async function handleEvenOddResult(ctx: any, db: any, userChoice: 'even' | 'odd') {
  const userId = ctx.from?.id;
  ctx.session = ctx.session || {};
  const bet = ctx.session.bet || 1;
  db.get('SELECT balance FROM users WHERE id = ?', [userId], (err: any, row: any) => {
    if (!row || row.balance < bet) {
      ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!');
      return;
    }
    db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [bet, userId]);
    // 10% —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
    const win = Math.random() < 0.1;
    let dice;
    if (win) {
      // –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—Å—Ç—å –ø–æ–¥ –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
      dice = userChoice === 'even' ? 2 * (Math.floor(Math.random() * 3) + 1) : 2 * Math.floor(Math.random() * 3) + 1;
    } else {
      // –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞
      dice = userChoice === 'even' ? 2 * Math.floor(Math.random() * 3) + 1 : 2 * (Math.floor(Math.random() * 3) + 1);
      // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª—É—á–∞–π–Ω–æ —Å–æ–≤–ø–∞–ª–æ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä–æ–∫–∞, –º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
      if ((dice % 2 === 0 && userChoice === 'even') || (dice % 2 === 1 && userChoice === 'odd')) {
        dice = dice === 6 ? 5 : dice + 1;
      }
    }
    const diceEmojis = ['‚öÄ','‚öÅ','‚öÇ','‚öÉ','‚öÑ','‚öÖ'];
    ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${userChoice === 'even' ? '—á—ë—Ç–Ω–æ–µ' : '–Ω–µ—á—ë—Ç–Ω–æ–µ'}, —Å—Ç–∞–≤–∫–∞: ${bet} TON`);
    ctx.replyWithDice('üé≤').then((diceMsg: any) => {
      setTimeout(() => {
        ctx.reply(`${diceEmojis[dice-1]} (${dice})\n${win ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${(bet*1.5).toFixed(2)} TON!` : '–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.'}`);
        if (win) {
          db.run('UPDATE users SET balance = balance + ? WHERE id = ?', [bet*1.5, userId]);
        }
      }, 3000);
    });
  });
}

export async function numberGame(ctx: any, db: any) {
  ctx.session = ctx.session || {};
  ctx.session.awaitingBet = 'number';
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–≤ TON) –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç:');
}

export async function handleNumberBet(ctx: any, db: any, bet: number) {
  ctx.session = ctx.session || {};
  ctx.session.bet = bet;
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:', Markup.inlineKeyboard([
    [1,2,3,4,5,6].map(n => Markup.button.callback(n.toString(), `num_${n}`))
  ]));
}

export async function handleNumberResult(ctx: any, db: any, userNum: number) {
  const userId = ctx.from?.id;
  ctx.session = ctx.session || {};
  const bet = ctx.session.bet || 1;
  db.get('SELECT balance FROM users WHERE id = ?', [userId], (err: any, row: any) => {
    if (!row || row.balance < bet) {
      ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!');
      return;
    }
    db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [bet, userId]);
    // 10% —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
    const win = Math.random() < 0.1;
    let dice;
    if (win) {
      dice = userNum;
    } else {
      // –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ –∫—Ä–æ–º–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
      const nums = [1,2,3,4,5,6].filter(n => n !== userNum);
      dice = nums[Math.floor(Math.random() * nums.length)];
      // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª—É—á–∞–π–Ω–æ —Å–æ–≤–ø–∞–ª–æ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä–æ–∫–∞, –º–µ–Ω—è–µ–º –Ω–∞ –¥—Ä—É–≥–æ–µ
      if (dice === userNum) {
        dice = dice === 6 ? 5 : dice + 1;
      }
    }
    const diceEmojis = ['‚öÄ','‚öÅ','‚öÇ','‚öÉ','‚öÑ','‚öÖ'];
    ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${userNum}, —Å—Ç–∞–≤–∫–∞: ${bet} TON`);
    ctx.replyWithDice('üé≤').then((diceMsg: any) => {
      setTimeout(() => {
        ctx.reply(`${diceEmojis[dice-1]} (${dice})\n${win ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${(bet*3).toFixed(2)} TON!` : '–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.'}`);
        if (win) {
          db.run('UPDATE users SET balance = balance + ? WHERE id = ?', [bet*3, userId]);
        }
      }, 3000);
    });
  });
}
