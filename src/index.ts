// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞
import { Telegraf, Markup, session } from 'telegraf';
import path from 'path';
import { evenOddGame, numberGame, handleEvenOddResult, handleNumberResult } from './games';
import axios from 'axios';
import fs from 'fs';

// –°–µ–∫—Ä–µ—Ç—ã –ª—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ process.env, –Ω–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç–µ ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å
const BOT_TOKEN = process.env.BOT_TOKEN || '7725310107:AAEzkOaYJYc-TpUV-VxR__LRnIe_4zbZjVU';
const TON_DEPOSIT_ADDRESS = process.env.TON_DEPOSIT_ADDRESS || 'UQDOSJdPi0iGP0638uZ6hflv45FbMveyYvw36rhuKmO-Fptd';
const TON_WALLET = process.env.TON_WALLET || 'UQDOSJdPi0iGP0638uZ6hflv45FbMveyYvw36rhuKmO-Fptd';
const TONAPI_KEY = process.env.TONAPI_KEY || '–í–ê–®_TONAPI_KEY';

const bot = new Telegraf(BOT_TOKEN);
bot.use(session()); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å—Ç–∞–≤–æ–∫!

const dbPath = path.resolve(__dirname, '../casino.db');
const sqlite3 = require('sqlite3').verbose();
let db = new sqlite3.Database(dbPath);

function initDB() {
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    balance REAL DEFAULT 0,
    last_tx TEXT
  )`);
  db.run(`CREATE TABLE IF NOT EXISTS deposits (
    tx_hash TEXT PRIMARY KEY,
    user_id INTEGER,
    username TEXT,
    amount REAL,
    timestamp INTEGER
  )`);
}

bot.start(async (ctx: any) => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username || '';
  db.run('INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)', [userId, username]);
  ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!\n/deposit ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å TON\n/balance ‚Äî —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å\n/games ‚Äî —Å–ø–∏—Å–æ–∫ –∏–≥—Ä');
});

bot.command('deposit', (ctx: any) => {
  ctx.reply(`–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ TON –Ω–∞ –∞–¥—Ä–µ—Å:\n${TON_DEPOSIT_ADDRESS}\n\n–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram username –∏–ª–∏ user id. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /checkdeposit –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.`);
});

bot.command('balance', (ctx: any) => {
  const userId = ctx.from?.id;
  db.get('SELECT balance FROM users WHERE id = ?', [userId], (err: any, row: any) => {
    ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${row?.balance ?? 0} TON`);
  });
});

bot.command('games', (ctx: any) => {
  ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\nüé≤ /evenodd ‚Äî —á—ë—Ç/–Ω–µ—á—ë—Ç\nüé≤ /number ‚Äî —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ 1-6');
});

bot.command('evenodd', (ctx: any) => evenOddGame(ctx, db));
bot.command('number', (ctx: any) => numberGame(ctx, db));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è even/odd –∏ number
bot.on('callback_query', async (ctx: any) => {
  const userId = ctx.from?.id;
  const data = ctx.callbackQuery.data;
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ —Å–µ—Å—Å–∏–∏
  const bet = ctx.session?.bet || 0;

  if (data === 'even' || data === 'odd') {
    const diceMsg = await ctx.replyWithDice('üé≤');
    setTimeout(() => {
      const dice = diceMsg.dice.value;
      const diceEmojis = ['‚öÄ','‚öÅ','‚öÇ','‚öÉ','‚öÑ','‚öÖ'];
      const isEven = dice % 2 === 0;
      const win = (isEven && data === 'even') || (!isEven && data === 'odd');
      if (win) {
        db.run('UPDATE users SET balance = balance + ? WHERE id = ?', [bet * 1.5, userId]);
        ctx.reply(`${diceEmojis[dice-1]} (${dice})\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ x1.5 –æ—Ç —Å—Ç–∞–≤–∫–∏!`);
      } else {
        ctx.reply(`${diceEmojis[dice-1]} (${dice})\n–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.`);
      }
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ –∏–≥—Ä—ã
      ctx.session.bet = undefined;
    }, 3000);
  }
  if (data && data.startsWith('num_')) {
    const userNum = parseInt(data.replace('num_', ''));
    const diceMsg = await ctx.replyWithDice('üé≤');
    setTimeout(() => {
      const dice = diceMsg.dice.value;
      const diceEmojis = ['‚öÄ','‚öÅ','‚öÇ','‚öÉ','‚öÑ','‚öÖ'];
      if (userNum === dice) {
        db.run('UPDATE users SET balance = balance + ? WHERE id = ?', [bet * 3, userId]);
        ctx.reply(`${diceEmojis[dice-1]} (${dice})\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ x3 –æ—Ç —Å—Ç–∞–≤–∫–∏!`);
      } else {
        ctx.reply(`${diceEmojis[dice-1]} (${dice})\n–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.`);
      }
      ctx.session.bet = undefined;
    }, 3000);
  }
  ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á—ë—Ç/–Ω–µ—á—ë—Ç –∏ —á–∏—Å–ª–∞
bot.action(['even', 'odd'], (ctx: any) => {
  require('./games').handleEvenOddResult(ctx, db, ctx.match[0]);
  ctx.answerCbQuery();
});
bot.action(/num_\d+/, (ctx: any) => {
  const num = parseInt(ctx.match[0].replace('num_', ''));
  require('./games').handleNumberResult(ctx, db, num);
  ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
bot.on('text', async (ctx: any) => {
  ctx.session = ctx.session || {};
  const awaiting = ctx.session.awaitingBet;
  if (!awaiting) return;
  const bet = parseFloat(ctx.message.text.replace(',', '.'));
  if (isNaN(bet) || bet <= 0) {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userId = ctx.from?.id;
  db.get('SELECT balance FROM users WHERE id = ?', [userId], (err: any, row: any) => {
    if (!row || row.balance < bet) {
      ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!');
      return;
    }
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞
    db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [bet, userId]);
    ctx.session.bet = bet;
    ctx.session.awaitingBet = undefined;
    if (awaiting === 'evenOdd') {
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ:', Markup.inlineKeyboard([
        [Markup.button.callback('–ß—ë—Ç–Ω–æ–µ', 'even'), Markup.button.callback('–ù–µ—á—ë—Ç–Ω–æ–µ', 'odd')]
      ]));
    } else if (awaiting === 'number') {
      ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:', Markup.inlineKeyboard([
        [1,2,3,4,5,6].map(n => Markup.button.callback(n.toString(), `num_${n}`))
      ]));
    }
  });
});

async function checkTonDeposit(userId: number, username: string) {
  try {
    const url = `https://tonapi.io/v2/blockchain/accounts/${TON_WALLET}/transactions?limit=20`;
    const res = await axios.get(url, { headers: { Authorization: `Bearer ${TONAPI_KEY}` } });
    const txs = res.data.transactions;
    let found = false;

    for (const tx of txs) {
      if (!tx.in_msg || !tx.in_msg.comment) continue;
      const comment = tx.in_msg.comment;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ userId, username –∏ @username
      if (
        comment.includes(userId.toString()) ||
        (username && (comment.includes(username) || comment.includes('@' + username)))
      ) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω —ç—Ç–æ—Ç tx
        const exists = await new Promise(resolve => {
          db.get('SELECT 1 FROM deposits WHERE tx_hash = ?', [tx.hash], (err: any, row: any) => resolve(!!row));
        });
        if (!exists) {
          const amount = tx.in_msg.value / 1e9;
          db.run('UPDATE users SET balance = balance + ?, last_tx = ? WHERE id = ?', [amount, tx.hash, userId]);
          db.run('INSERT INTO deposits (tx_hash, user_id, username, amount, timestamp) VALUES (?, ?, ?, ?, ?)', [
            tx.hash, userId, username, amount, tx.utime
          ]);
          found = true;
          return amount;
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏—â–µ–º "–≤–∏—Å—è—â–∏–µ" –¥–µ–ø–æ–∑–∏—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Ñ–∞–π–ª
    const unclaimed: any[] = [];
    for (const tx of txs) {
      if (!tx.in_msg || !tx.in_msg.comment) continue;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω —ç—Ç–æ—Ç tx
      const exists = await new Promise(resolve => {
        db.get('SELECT 1 FROM deposits WHERE tx_hash = ?', [tx.hash], (err: any, row: any) => resolve(!!row));
      });
      if (!exists) {
        unclaimed.push({
          tx_hash: tx.hash,
          comment: tx.in_msg.comment,
          amount: tx.in_msg.value / 1e9,
          timestamp: tx.utime
        });
      }
    }
    if (unclaimed.length > 0) {
      fs.writeFileSync('unclaimed_deposits.json', JSON.stringify(unclaimed, null, 2), 'utf-8');
    }

    return 0;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–ø–æ–∑–∏—Ç–∞:', e);
    return 0;
  }
}

bot.command('checkdeposit', async (ctx: any) => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username || '';
  const amount = await checkTonDeposit(userId, username);
  if (amount > 0) {
    ctx.reply(`–î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω: +${amount} TON!`);
  } else {
    ctx.reply('–î–µ–ø–æ–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π user id –∏–ª–∏ username –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

const PORT = Number(process.env.PORT) || 3000;
const DOMAIN = process.env.RENDER_EXTERNAL_URL;

(async () => {
  initDB();
  await bot.telegram.setMyCommands([
    { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
    { command: 'balance', description: '–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å' },
    { command: 'games', description: '–°–ø–∏—Å–æ–∫ –∏–≥—Ä' },
    { command: 'deposit', description: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' },
    { command: 'checkdeposit', description: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç' }
  ]);
  if (DOMAIN) {
    await bot.launch({
      webhook: {
        // Render –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ /, –ø–æ—ç—Ç–æ–º—É hookPath ‚Äî '/'
        domain: DOMAIN,
        hookPath: '/',
        port: PORT
      }
    });
    console.log(`Bot started in webhook mode on ${DOMAIN}`);
  } else {
    await bot.launch();
    console.log('Bot started in polling mode');
  }
})();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
