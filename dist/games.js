"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evenOddGame = evenOddGame;
exports.handleEvenOddResult = handleEvenOddResult;
exports.numberGame = numberGame;
exports.handleNumberResult = handleNumberResult;
// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞
const telegraf_1 = require("telegraf");
const slotEmojis = ['7Ô∏è‚É£', 'üçá', 'üçã', 'üêè'];
const emojiMap = {
    1: '7Ô∏è‚É£',
    2: 'üçá',
    3: 'üçã',
    4: 'üêè',
};
// export async function slotGame(ctx: any, db: any) {
//   const userId = ctx.from?.id;
//   const text = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
//   const guess = text.replace('/slot', '').trim();
//   if (!Object.values(emojiMap).includes(guess)) {
//     ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–æ—Ç–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /slot 7Ô∏è‚É£ –∏–ª–∏ /slot üçá');
//     return;
//   }
//   // –ö–∏–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç üé∞
//   const diceMsg = await ctx.replyWithDice('slot');
//   setTimeout(() => {
//     const resultValue = diceMsg.dice.value;
//     const resultEmoji = emojiMap[resultValue] || 'üé∞';
//     if (guess === resultEmoji) {
//       db.run('UPDATE users SET balance = balance * 5 WHERE id = ?', [userId]);
//       ctx.reply(`–í—ã–ø–∞–ª–æ: ${resultEmoji}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ x5 –æ—Ç –±–∞–ª–∞–Ω—Å–∞!`);
//     } else {
//       ctx.reply(`–í—ã–ø–∞–ª–æ: ${resultEmoji}\n–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.`);
//     }
//   }, 3000);
// }
async function evenOddGame(ctx, db) {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ:', telegraf_1.Markup.inlineKeyboard([
        [telegraf_1.Markup.button.callback('–ß—ë—Ç–Ω–æ–µ', 'even'), telegraf_1.Markup.button.callback('–ù–µ—á—ë—Ç–Ω–æ–µ', 'odd')]
    ]));
}
// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Å—Ç–∏ (—á—ë—Ç/–Ω–µ—á—ë—Ç)
async function handleEvenOddResult(ctx, db, userChoice) {
    const userId = ctx.from?.id;
    // –ö–∏–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ—Å—Ç—å üé≤
    const diceMsg = await ctx.replyWithDice('üé≤');
    // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    setTimeout(() => {
        const dice = diceMsg.dice.value;
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        const isEven = dice % 2 === 0;
        const win = (isEven && userChoice === 'even') || (!isEven && userChoice === 'odd');
        if (win) {
            db.run('UPDATE users SET balance = balance * 1.5 WHERE id = ?', [userId]);
            ctx.reply(`${diceEmojis[dice - 1]} (${dice})\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ x1.5 –æ—Ç –±–∞–ª–∞–Ω—Å–∞!`);
        }
        else {
            ctx.reply(`${diceEmojis[dice - 1]} (${dice})\n–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.`);
        }
    }, 3000);
}
async function numberGame(ctx, db) {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:', telegraf_1.Markup.inlineKeyboard([
        [1, 2, 3, 4, 5, 6].map(n => telegraf_1.Markup.button.callback(n.toString(), `num_${n}`))
    ]));
}
// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ
async function handleNumberResult(ctx, db, userNum) {
    const userId = ctx.from?.id;
    const diceMsg = await ctx.replyWithDice('üé≤');
    setTimeout(() => {
        const dice = diceMsg.dice.value;
        const diceEmojis = ['‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        if (userNum === dice) {
            db.run('UPDATE users SET balance = balance * 3 WHERE id = ?', [userId]);
            ctx.reply(`${diceEmojis[dice - 1]} (${dice})\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ x3 –æ—Ç –±–∞–ª–∞–Ω—Å–∞!`);
        }
        else {
            ctx.reply(`${diceEmojis[dice - 1]} (${dice})\n–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.`);
        }
    }, 3000);
}
