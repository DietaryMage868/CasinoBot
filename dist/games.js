"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evenOddGame = evenOddGame;
exports.handleEvenOddBet = handleEvenOddBet;
exports.handleEvenOddResult = handleEvenOddResult;
exports.numberGame = numberGame;
exports.handleNumberBet = handleNumberBet;
exports.handleNumberResult = handleNumberResult;
// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∑–∏–Ω–æ-–±–æ—Ç–∞
const telegraf_1 = require("telegraf");
const slotEmojis = ["7Ô∏è‚É£", "üçá", "üçã", "üêè"];
const emojiMap = {
    1: "7Ô∏è‚É£",
    2: "üçá",
    3: "üçã",
    4: "üêè",
};
// export async function slotGame(ctx: any, db: any) {
//   const userId = ctx.from?.id;
//   const text = ctx.message && 'text' in ctx.message ? ctx.message.text : '';
//   const guess = text.replace('/slot', '').trim();
//   if (!Object.values(emojiMap).includes(guess)) {
//     ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–æ—Ç–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /slot 7Ô∏è‚É£ –∏–ª–∏ /slot üçá');
//     return;
//   }
//   // –ö–∏–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç üé∞
//   const diceMsg = await ctx.replyWithDice('slot');
//   setTimeout(() => {
//     const resultValue = diceMsg.dice.value;
//     const resultEmoji = emojiMap[resultValue] || 'üé∞';
//     if (guess === resultEmoji) {
//       db.run('UPDATE users SET balance = balance * 5 WHERE id = ?', [userId]);
//       ctx.reply(`–í—ã–ø–∞–ª–æ: ${resultEmoji}\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ x5 –æ—Ç –±–∞–ª–∞–Ω—Å–∞!`);
//     } else {
//       ctx.reply(`–í—ã–ø–∞–ª–æ: ${resultEmoji}\n–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏.`);
//     }
//   }, 3000);
// }
async function evenOddGame(ctx, db) {
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–≤ TON):", telegraf_1.Markup.inlineKeyboard([
        [
            telegraf_1.Markup.button.callback("1", "bet_1"),
            telegraf_1.Markup.button.callback("5", "bet_5"),
            telegraf_1.Markup.button.callback("10", "bet_10"),
        ],
    ]));
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –∏ —á—ë—Ç/–Ω–µ—á—ë—Ç
async function handleEvenOddBet(ctx, db, bet) {
    ctx.session = ctx.session || {};
    ctx.session.bet = bet;
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ:", telegraf_1.Markup.inlineKeyboard([
        [
            telegraf_1.Markup.button.callback("–ß—ë—Ç–Ω–æ–µ", "even"),
            telegraf_1.Markup.button.callback("–ù–µ—á—ë—Ç–Ω–æ–µ", "odd"),
        ],
    ]));
}
async function handleEvenOddResult(ctx, db, userChoice) {
    const userId = ctx.from?.id;
    ctx.session = ctx.session || {};
    const bet = ctx.session.bet || 1;
    db.get("SELECT balance FROM users WHERE id = ?", [userId], (err, row) => {
        if (!row || row.balance < bet) {
            ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!");
            return;
        }
        db.run("UPDATE users SET balance = balance - ? WHERE id = ?", [
            bet,
            userId,
        ]);
        // 10% —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
        const win = Math.random() < 0.1;
        let dice;
        if (win) {
            // –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—Å—Ç—å –ø–æ–¥ –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
            dice =
                userChoice === "even"
                    ? 2 * (Math.floor(Math.random() * 3) + 1)
                    : 2 * Math.floor(Math.random() * 3) + 1;
        }
        else {
            // –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞
            dice =
                userChoice === "even"
                    ? 2 * Math.floor(Math.random() * 3) + 1
                    : 2 * (Math.floor(Math.random() * 3) + 1);
            // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª—É—á–∞–π–Ω–æ —Å–æ–≤–ø–∞–ª–æ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä–æ–∫–∞, –º–µ–Ω—è–µ–º –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
            if ((dice % 2 === 0 && userChoice === "even") ||
                (dice % 2 === 1 && userChoice === "odd")) {
                dice = dice === 6 ? 5 : dice + 1;
            }
        }
        const diceEmojis = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"];
        ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${userChoice === "even" ? "—á—ë—Ç–Ω–æ–µ" : "–Ω–µ—á—ë—Ç–Ω–æ–µ"}, —Å—Ç–∞–≤–∫–∞: ${bet} TON`);
        ctx.replyWithDice("üé≤").then((diceMsg) => {
            setTimeout(() => {
                ctx.reply(`${diceEmojis[dice - 1]} (${dice})\n${win
                    ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${(bet * 1.5).toFixed(2)} TON!`
                    : "–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏."}`);
                if (win) {
                    db.run("UPDATE users SET balance = balance + ? WHERE id = ?", [
                        bet * 1.5,
                        userId,
                    ]);
                }
            }, 3000);
        });
    });
}
async function numberGame(ctx, db) {
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–≤ TON):", telegraf_1.Markup.inlineKeyboard([
        [
            telegraf_1.Markup.button.callback("1", "betn_1"),
            telegraf_1.Markup.button.callback("5", "betn_5"),
            telegraf_1.Markup.button.callback("10", "betn_10"),
        ],
    ]));
}
async function handleNumberBet(ctx, db, bet) {
    ctx.session = ctx.session || {};
    ctx.session.bet = bet;
    ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:", telegraf_1.Markup.inlineKeyboard([
        [1, 2, 3, 4, 5, 6].map((n) => telegraf_1.Markup.button.callback(n.toString(), `num_${n}`)),
    ]));
}
async function handleNumberResult(ctx, db, userNum) {
    const userId = ctx.from?.id;
    ctx.session = ctx.session || {};
    const bet = ctx.session.bet || 1;
    db.get("SELECT balance FROM users WHERE id = ?", [userId], (err, row) => {
        if (!row || row.balance < bet) {
            ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!");
            return;
        }
        db.run("UPDATE users SET balance = balance - ? WHERE id = ?", [
            bet,
            userId,
        ]);
        // 10% —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫–∞
        const win = Math.random() < 0.1;
        let dice;
        if (win) {
            dice = userNum;
        }
        else {
            // –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—é–±–æ–µ —á–∏—Å–ª–æ –∫—Ä–æ–º–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
            const nums = [1, 2, 3, 4, 5, 6].filter((n) => n !== userNum);
            dice = nums[Math.floor(Math.random() * nums.length)];
            // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª—É—á–∞–π–Ω–æ —Å–æ–≤–ø–∞–ª–æ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä–æ–∫–∞, –º–µ–Ω—è–µ–º –Ω–∞ –¥—Ä—É–≥–æ–µ
            if (dice === userNum) {
                dice = dice === 6 ? 5 : dice + 1;
            }
        }
        const diceEmojis = ["‚öÄ", "‚öÅ", "‚öÇ", "‚öÉ", "‚öÑ", "‚öÖ"];
        ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${userNum}, —Å—Ç–∞–≤–∫–∞: ${bet} TON`);
        ctx.replyWithDice("üé≤").then((diceMsg) => {
            setTimeout(() => {
                ctx.reply(`${diceEmojis[dice - 1]} (${dice})\n${win
                    ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${(bet * 3).toFixed(2)} TON!`
                    : "–£–≤—ã, –Ω–µ —É–≥–∞–¥–∞–ª–∏."}`);
                if (win) {
                    db.run("UPDATE users SET balance = balance + ? WHERE id = ?", [
                        bet * 3,
                        userId,
                    ]);
                }
            }, 3000);
        });
    });
}
